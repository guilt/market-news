[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "market-news-generator"
version = "0.1.0"
description = "Live market watch with country detection and real-time stock analysis"
authors = [{name = "Market News Team", email = "contact@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.7"
keywords = ["market", "news", "generator", "prompts", "finance", "business"]
dependencies = [
    "rich>=13.0.0",
    "requests>=2.28.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Text Processing",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
market = "market_news_generator.watch:main"

[project.urls]
Homepage = "https://github.com/yourusername/market-news-generator"
Repository = "https://github.com/yourusername/market-news-generator"
Issues = "https://github.com/yourusername/market-news-generator/issues"
Documentation = "https://github.com/yourusername/market-news-generator#readme"

[tool.hatch.version]
path = "market_news_generator/__init__.py"

[tool.black]
line-length = 88
target-version = ['py37']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.coverage.run]
source = ["market_news_generator"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
